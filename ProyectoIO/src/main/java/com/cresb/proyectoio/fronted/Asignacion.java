/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cresb.proyectoio.fronted;

import com.cresb.proyectoio.fronted.entidades.Nodo;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Benjamin
 */
public class Asignacion extends javax.swing.JDialog {

    private ArrayList<Nodo> actividades;

    /**
     * Creates new form Asignacion
     */
    public Asignacion(java.awt.Frame parent, boolean modal, ArrayList<Nodo> actividades) {
        super(parent, modal);
        initComponents();
        this.actividades = actividades;
        this.asignarDatosPrincipal();
        this.asignarDatosSecundario();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        NombreActividad = new javax.swing.JTextField();
        IdActividades = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        ItemsPresedencia = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ASIGNACION DE PRESEDENCIA");
        setResizable(false);

        jLabel1.setText("Actividad:");

        jLabel3.setText("Id:");

        NombreActividad.setEditable(false);

        IdActividades.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                IdActividadesItemStateChanged(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Presedencia"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
        }

        jLabel2.setText("Actividades");

        jButton1.setText("Agregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Selecciones una actividad para agregar de precedencia");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NombreActividad)
                            .addComponent(IdActividades, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(ItemsPresedencia, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(IdActividades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(NombreActividad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ItemsPresedencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IdActividadesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_IdActividadesItemStateChanged
        // TODO add your handling code here:

        this.actualizacionActividadPrincipal();
    }//GEN-LAST:event_IdActividadesItemStateChanged


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Nodo actividadPrincipal = null;
        int idActiP = Integer.parseInt((String) this.IdActividades.getSelectedItem());
        for (Nodo actividad : this.actividades) {
            if (actividad.getId() == idActiP) {
                actividadPrincipal = actividad;
                break;
            }
        }

        Nodo actividadAgregar = null;
        int idActiAg = Integer.parseInt((String) this.ItemsPresedencia.getSelectedItem());
        for (Nodo actividad : this.actividades) {
            if (actividad.getId() == idActiAg) {
                actividadAgregar = actividad;
                break;
            }
        }

        if (actividadPrincipal == null) {
            System.out.println("No hay principal null");
        } else {
            if (actividadAgregar == null) {
                System.out.println("No hay agregar null");
            } else {
                if (actividadAgregar.getId() == actividadPrincipal.getId()) {
                    System.out.println("Error recursivo no permitido");
                } else {
                    actividadPrincipal.getPresendecia().add(actividadAgregar);
                    actividadAgregar.getSiguiente().add(actividadPrincipal);
                    this.actualizacionActividadPrincipal();
                    System.out.println(actividadPrincipal.getPresendecia().toString());
                }
            }
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> IdActividades;
    private javax.swing.JComboBox<String> ItemsPresedencia;
    private javax.swing.JTextField NombreActividad;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void asignarDatosPrincipal() {
        for (Nodo actividad : actividades) {
            this.IdActividades.addItem(String.valueOf(actividad.getId()));
        }
    }

    private void actualizarTablaPresedencia(ArrayList<Nodo> presendecia) {
        this.deleteAllRows((DefaultTableModel) jTable1.getModel());
        for (Nodo actividad : presendecia) {
            agregarTabla(actividad);
        }
    }

    private void deleteAllRows(final DefaultTableModel model) {
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }

    private void agregarTabla(Nodo nodo) {
        //Sección 1 
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        //Sección 2
        Object[] fila = new Object[1];
        //Sección 3
        fila[0] = "id: " + nodo.getId() + " - " + nodo.getNombre();
        //Sección 4
        modelo.addRow(fila);
        //Sección 5
        jTable1.setModel(modelo);
    }

    private void asignarDatosSecundario() {
        this.ItemsPresedencia.removeAll();
        for (Nodo actividad : this.actividades) {
            this.ItemsPresedencia.addItem(String.valueOf(actividad.getId()));
        }

    }

    private void actualizacionActividadPrincipal() {
        //aactualizacion de dattos cuando se selecciona una opccion
        int val = this.IdActividades.getSelectedIndex();
        int id = Integer.parseInt(this.IdActividades.getItemAt(val));
        for (Nodo actividad : actividades) {
            if (actividad.getId() == id) {
                this.NombreActividad.setText(actividad.getNombre());
                this.actualizarTablaPresedencia(actividad.getPresendecia());
                break;
            }
        }
    }
}
